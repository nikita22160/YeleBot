import datetime
import re

import telebot
import gspread
import gspread_formatting as gspf

"""
–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç, –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather
–≤ Telegram –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª token.txt

–î–∞–ª–µ–µ –Ω—É–∂–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç Google. –°–ª–µ–¥—É–π—Ç–µ —É—Ä–æ–∫—É –Ω–∞ —Å–∞–π—Ç–µ
https://habr.com/ru/articles/483302/
–ß–∏—Ç–∞–π—Ç–µ –æ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö Google –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫" –¥–æ "–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±–∏–±–ª–∏–æ—Ç–µ–∫."
–°–∫–∞—á–∞–Ω–Ω—ã–π .json —Ñ–∞–π–ª —Å –∫–ª—é—á–æ–º –¥–æ–±–∞–≤—å—Ç–µ –≤ –ø–∞–ø–∫—É —Å –¥–∞–Ω–Ω—ã–º —Å–∫—Ä–∏–ø—Ç–æ–º –∏ –ø–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ –µ–≥–æ –≤ "service_account.json"

–î–∞–ª–µ–µ —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è.
–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –≤ BotFather:
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /setcommands
2. –í—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω–æ–≥–æ –±–æ—Ç–∞
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ:
start - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
cancel - –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
create - –°–æ–∑–¥–∞—Ç—å Google —Ç–∞–±–ª–∏—Ü—É —Å –∑–∞–º–µ—Ç–∫–∞–º–∏
addnote - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –≤ Google —Ç–∞–±–ª–∏—Ü—É
findnote - –ù–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫—É, –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É
deleteall - –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ

"""

with open("token.txt") as file:
    token = file.read()
bot = telebot.TeleBot(token)
gc = gspread.service_account("service_account.json")
event_data = {}


def check_cancel(message):
    if message.text == "/cancel" or '/' in message.text or \
            message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        bot.send_message(message.from_user.id, "–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è.")
        return True
    return False


def get_table(message):
    try:
        result = gc.open_by_key(message.text)
    except (gspread.exceptions.APIError, gspread.exceptions.SpreadsheetNotFound):
        try:
            result = gc.open(message.text)
        except (gspread.exceptions.APIError, gspread.exceptions.SpreadsheetNotFound):
            bot.send_message(message.from_user.id, "–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return False
    event_data["table"] = result
    return True


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    if message.text == "/start":
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = telebot.types.KeyboardButton("üí° –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É")
        btn2 = telebot.types.KeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
        btn3 = telebot.types.KeyboardButton("üîç –ù–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫—É –∏ —Å–æ–≤–µ—Ä—à–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è")
        btn4 = telebot.types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")
        btn5 = telebot.types.KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏")
        markup.add(btn1, btn2, btn3, btn4, btn5)

        bot.send_message(message.from_user.id,
                         "–ü—Ä–∏–≤–µ—Ç.\n"
                         "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å –∑–∞–º–µ—Ç–∫–∞–º–∏, –≤–≤–µ–¥–∏—Ç–µ /create\n"
                         "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –≤–≤–µ–¥–∏—Ç–µ /cancel\n"
                         "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É, –≤–≤–µ–¥–∏—Ç–µ /addnote\n"
                         "–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫–∏ –∏ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è, –≤–≤–µ–¥–∏—Ç–µ /findnote\n"
                         "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏, –≤–≤–µ–¥–∏—Ç–µ /deleteall",
                         reply_markup=markup)
    elif message.text == "/create" or message.text == "üí° –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É":
        bot.send_message(message.from_user.id, "–ù–∞–∑–æ–≤–∏—Ç–µ —Ñ–∞–π–ª —Å –∑–∞–º–µ—Ç–∫–∞–º–∏.")
        bot.register_next_step_handler(message, create_get_name)
    elif message.text == "/addnote" or message.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É":
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ã –ª–∏–±–æ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏.")
        bot.register_next_step_handler(message, addnote_tableid)
    elif message.text == "/findnote" or message.text == "üîç –ù–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫—É –∏ —Å–æ–≤–µ—Ä—à–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è":
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ã –ª–∏–±–æ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏.")
        bot.register_next_step_handler(message, findnote_tableid)
    elif message.text == "/deleteall" or message.text == "üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏":
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ã –ª–∏–±–æ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏.")
        bot.register_next_step_handler(message, deleteall)
    else:
        bot.send_message(message.from_user.id, "–ù–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")


# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏

def create_get_name(message):
    if check_cancel(message): return

    event_data["name"] = message.text
    bot.send_message(message.from_user.id, "–ù–∞–∑–æ–≤–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã, "
                                           "—á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É.")
    bot.register_next_step_handler(message, create_get_email)


def create_get_email(message):
    if check_cancel(message): return

    if '@' not in message.text:
        bot.send_message(message.from_user.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, create_get_email)
        return

    event_data["email"] = message.text
    bot.send_message(message.from_user.id, "(–ü–æ –∂–µ–ª–∞–Ω–∏—é) –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è/–ø—Å–µ–≤–¥–æ–Ω–∏–º,"
                                           "—á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –µ–≥–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ —Ç–∞–±–ª–∏—Ü—ã,"
                                           "–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ \"–ù–µ—Ç\".")
    bot.register_next_step_handler(message, create_get_person_name)


def create_get_person_name(message):
    if check_cancel(message): return

    if message.text.lower() != "–Ω–µ—Ç":
        event_data["person_name"] = message.text
    else:
        event_data["person_name"] = ""
    create_create_sheet(message)


def create_create_sheet(message):
    if check_cancel(message): return

    bot.send_message(message.from_user.id, f"–°–æ–∑–¥–∞—é Google —Ç–∞–±–ª–∏—Ü—É \"{event_data['name']}\"...")
    sheet = gc.create(event_data["name"])
    sheet.share(event_data["email"], perm_type="user", role="writer")
    worksheet = sheet.sheet1

    if event_data["person_name"]:
        worksheet.update("A1", f"–°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ \"{event_data['person_name']}\"")
    else:
        worksheet.update("A1", f"–°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫")

    worksheet.update("A2", [["–ó–∞–¥–∞–Ω–∏–µ", "–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞", "–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞", "–°—Ç–µ–ø–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏", "–°—Ç–∞—Ç—É—Å"]])
    gspf.set_column_width(worksheet, 'A', 200)
    gspf.set_column_width(worksheet, 'B', 150)
    gspf.set_column_width(worksheet, 'C', 150)
    gspf.set_column_width(worksheet, 'D', 150)
    gspf.set_column_width(worksheet, 'F', 100)
    gspf.format_cell_range(worksheet, "A2:F2",
                           gspf.CellFormat(textFormat=gspf.TextFormat(bold=True)))

    link = "https://docs.google.com/spreadsheets/d/" + sheet.id
    bot.send_message(message.from_user.id, f"–°—Å—ã–ª–∫–∞ –Ω–∞ Google —Ç–∞–±–ª–∏—Ü—É: {link}\n"
                                           f"ID —Ç–∞–±–ª–∏—Ü—ã: {sheet.id}\n"
                                           "–ù–µ —Ç–µ—Ä—è–π—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ã, —Ç–∞–∫ –∫–∞–∫ (–µ—Å–ª–∏ –≤—ã –∑–∞–±—É–¥–µ—Ç–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã) "
                                           "–∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –Ω–µ–≥–æ.\n"
                                           "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /addnote\n"
                                           "–ß—Ç–æ–±—ã —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∏—Å–∫ –ø–æ –∑–∞–º–µ—Ç–∫–∞–º –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ –Ω–∏–º–∏, "
                                           "–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /findnote")


# –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏

def addnote_tableid(message):
    if check_cancel(message): return

    if get_table(message):
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å:\n"
                                               "–ó–∞–¥–∞–Ω–∏–µ, –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞, –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞, —Å—Ç–µ–ø–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏, —Å—Ç–∞—Ç—É—Å.\n"
                                               "\"–ó–∞–¥–∞–Ω–∏–µ\" –∏ \"–°—Ç–µ–ø–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏\" –º–æ–≥—É—Ç –±—ã—Ç—å –ª—é–±—ã–º —Ç–µ–∫—Å—Ç–æ–º.\n"
                                               "–§–æ—Ä–º–∞—Ç –¥–ª—è –¥–∞—Ç —Å–ª–µ–¥—É—é—â–∏–π: –î–î-–ú–ú-–ì–ì–ì–ì. –í—Å—Ç–∞–≤—å—Ç–µ \"!\", —á—Ç–æ–±—ã "
                                               "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É. –í—Å—Ç–∞–≤—å—Ç–µ \"-\", —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–µ"
                                               "–ø—É—Å—Ç—ã–º.\n"
                                               "–°—Ç–∞—Ç—É—Å —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±—ã–º —Ç–µ–∫—Å—Ç–æ–º, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "
                                               "\"–í –ø—Ä–æ—Ü–µ—Å—Å–µ\", \"–ó–∞–∫–æ–Ω—á–µ–Ω–æ\" –∏–ª–∏ \"–û—Ç–ª–æ–∂–µ–Ω–æ\".\n"
                                               "–ü–æ–ª–µ —Å—Ç–∞—Ç—É—Å–∞ –∏ —Å—Ç–µ–ø–µ–Ω–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω—ã –ø—Ä–æ—á–µ—Ä–∫–æ–º (\"-\")"
                                               " –∏–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã. –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –±—É–¥—É—Ç –≤–≤–µ–¥–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "
                                               "(\"–í –ø—Ä–æ—Ü–µ—Å—Å–µ\" –∏ \"–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ\" —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ).")
        bot.register_next_step_handler(message, addnote_data)


def addnote_data(message):
    if check_cancel(message): return

    data = message.text.split('\n')
    if len(data) < 3:
        bot.send_message(message.from_user.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –º–µ–Ω—å—à–µ, —á–µ–º 3).")
        return

    if data[0].strip() == "":
        bot.send_message(message.from_user.id, "–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    try:
        if data[1] == "!":
            data[1] = datetime.date.today().strftime('%d-%m-%Y')
        elif data[1] == "-":
            data[1] = ""
        else:
            date = [int(i) for i in data[1].split('-')]
            data[1] = datetime.date(date[2], date[1], date[0]).strftime('%d-%m-%Y')

        if data[2] == "!":
            data[2] = datetime.date.today().strftime('%d-%m-%Y')
        elif data[2] == "-":
            data[2] = ""
        else:
            date = [int(i) for i in data[2].split('-')]
            data[2] = datetime.date(date[2], date[1], date[0]).strftime('%d-%m-%Y')
    except ValueError:
        bot.send_message(message.from_user.id, "–î–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, "
                                               "—á—Ç–æ –æ–Ω–∞ –±—ã–ª–∞ –≤–≤–µ–¥–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì.")
        return

    bot.send_message(message.from_user.id, "–î–æ–±–∞–≤–ª—è—é –∑–∞–º–µ—Ç–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É...")

    if len(data) == 3:
        data.extend(["–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ", "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"])
    elif len(data) == 4:
        data.extend(["–í –ø—Ä–æ—Ü–µ—Å—Å–µ"])
    else:
        if data[3].strip() == "":
            data[3] = "–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ"
        if data[4].strip() == "":
            data[4] = "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"

    sheet = event_data["table"]
    worksheet = sheet.sheet1
    row = 3
    while worksheet.cell(row, 1).value:
        row += 1
    worksheet.update(f"A{row}", [data])

    bot.send_message(message.from_user.id, f"–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å—Ç—Ä–æ–∫—É –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {row}!")


# –ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–∫–∏

def findnote_tableid(message):
    if check_cancel(message): return

    if get_table(message):
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–º–µ—Ç–∫–æ–π –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏.\n"
                                               "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –ø–æ–∏—Å–∫ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞!")
        bot.register_next_step_handler(message, findnote_data)


def findnote_data(message):
    if check_cancel(message): return

    if message.text.isnumeric():
        sheet = event_data["table"]
        worksheet = sheet.sheet1

        row = int(message.text)
        if not worksheet.cell(row, 1):
            bot.send_message(message.from_user.id, "–î–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞.")
            return
        if row < 3:
            bot.send_message(message.from_user.id, "–î–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Ç–∞–±–ª–∏—Ü—ã –∑–∞–º–µ—Ç–æ–∫.")
            return

        markup = telebot.types.InlineKeyboardMarkup()
        btn_edit = telebot.types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="EditNote")
        btn_delete = telebot.types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data="DeleteNote")
        markup.add(btn_edit)
        markup.add(btn_delete)

        row_str = '\n'.join(worksheet.row_values(row))
        bot.send_message(message.from_user.id, f"–ó–∞–º–µ—Ç–∫–∞ ‚Ññ{row}: {row_str}",
                         reply_markup=markup)
        return

    bot.send_message(message.from_user.id, "–ò—â—É –∑–∞–º–µ—Ç–∫—É...")

    sheet = event_data["table"]
    worksheet = sheet.sheet1
    regular_expr = re.compile(message.text, re.I)
    cell_list = worksheet.findall(regular_expr)

    if len(cell_list) > 0:
        for cell in cell_list:
            markup = telebot.types.InlineKeyboardMarkup()
            btn_edit = telebot.types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="EditNote")
            btn_delete = telebot.types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data="DeleteNote")
            markup.add(btn_edit)
            markup.add(btn_delete)

            row = cell.row
            row_str = '\n'.join(worksheet.row_values(row))
            bot.send_message(message.from_user.id, f"–ó–∞–º–µ—Ç–∫–∞ ‚Ññ{row}: {row_str}",
                             reply_markup=markup)
    else:
        bot.send_message(message.from_user.id, "–ó–∞–º–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.")


def deleteall(message):
    if check_cancel(message): return

    if get_table(message):
        markup = telebot.types.InlineKeyboardMarkup()
        btn_yes = telebot.types.InlineKeyboardButton(text="–î–∞", callback_data="DeleteAll")
        markup.add(btn_yes)
        bot.send_message(message.from_user.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã –≤ —Ç–æ–º, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ \""
                                               f"{event_data['table'].title}\"? "
                                               "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Ö –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!",
                         reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.data == "EditNote":
        text = call.message.text
        start = text.find('‚Ññ')
        end = text.find(':')
        row = int(text[start + 1:end])

        event_data["row"] = row
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —è—á–µ–π–∫–∏.\n"
                                               "–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å:\n"
                                               "–ó–∞–¥–∞–Ω–∏–µ, –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞, –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞, —Å—Ç–µ–ø–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏, —Å—Ç–∞—Ç—É—Å.\n"
                                               "\"–ó–∞–¥–∞–Ω–∏–µ\" –∏ \"–°—Ç–µ–ø–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏\" –º–æ–≥—É—Ç –±—ã—Ç—å –ª—é–±—ã–º —Ç–µ–∫—Å—Ç–æ–º.\n"
                                               "–§–æ—Ä–º–∞—Ç –¥–ª—è –¥–∞—Ç —Å–ª–µ–¥—É—é—â–∏–π: –î–î-–ú–ú-–ì–ì–ì–ì. –í—Å—Ç–∞–≤—å—Ç–µ \"!\", —á—Ç–æ–±—ã "
                                               "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É. –í—Å—Ç–∞–≤—å—Ç–µ \"-\", —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–µ"
                                               "–ø—É—Å—Ç—ã–º.\n"
                                               "–°—Ç–∞—Ç—É—Å —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±—ã–º —Ç–µ–∫—Å—Ç–æ–º, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "
                                               "\"–í –ø—Ä–æ—Ü–µ—Å—Å–µ\", \"–ó–∞–∫–æ–Ω—á–µ–Ω–æ\" –∏–ª–∏ \"–û—Ç–ª–æ–∂–µ–Ω–æ\".\n"
                                               "–ü–æ–ª–µ —Å—Ç–∞—Ç—É—Å–∞ –∏ —Å—Ç–µ–ø–µ–Ω–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω—ã. "
                                               "–í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –±—É–¥—É—Ç –≤–≤–µ–¥–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "
                                               "(\"–í –ø—Ä–æ—Ü–µ—Å—Å–µ\" –∏ \"–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ\" —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ).")
        bot.register_next_step_handler(call.message, editnote)
    elif call.data == "DeleteNote":
        text = call.message.text
        start = text.find('‚Ññ')
        end = text.find(':')
        row = int(text[start + 1:end])

        bot.send_message(call.message.chat.id, "–£–¥–∞–ª—è—é –∑–∞–º–µ—Ç–∫—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã...")
        sheet = event_data["table"]
        worksheet = sheet.sheet1
        worksheet.copy_range(f"A{row + 1}:E{worksheet.row_count}", f"A{row}")
        worksheet.update(f"A{worksheet.row_count}", [[""] * 5])
        bot.send_message(call.message.chat.id, "–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
    elif call.data == "DeleteAll":
        sheet = event_data["table"]
        worksheet = sheet.sheet1
        worksheet.update("A3", [[""] * 5] * (worksheet.row_count - 3))
        bot.send_message(call.message.chat.id, "–ó–∞–º–µ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
    else:
        print("a", call.data)


def editnote(message):
    if check_cancel(message): return

    data = message.text.split('\n')
    if len(data) < 3:
        bot.send_message(message.from_user.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –º–µ–Ω—å—à–µ, —á–µ–º 3).")
        return

    try:
        if data[1] == "!":
            data[1] = datetime.date.today().strftime('%d-%m-%Y')
        elif data[1] == "-":
            data[1] = ""
        else:
            date = [int(i) for i in data[1].split('-')]
            data[1] = datetime.date(date[2], date[1], date[0]).strftime('%d-%m-%Y')

        if data[2] == "!":
            data[2] = datetime.date.today().strftime('%d-%m-%Y')
        elif data[2] == "-":
            data[2] = ""
        else:
            date = [int(i) for i in data[2].split('-')]
            data[2] = datetime.date(date[2], date[1], date[0]).strftime('%d-%m-%Y')
    except ValueError:
        bot.send_message(message.from_user.id, "–î–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, "
                                               "—á—Ç–æ –æ–Ω–∞ –±—ã–ª–∞ –≤–≤–µ–¥–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì.")
        return

    if len(data) == 3:
        data.extend(["–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ", "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"])
    elif len(data) == 4:
        data.extend(["–í –ø—Ä–æ—Ü–µ—Å—Å–µ"])
    else:
        if data[3].strip() == "":
            data[3] = "–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ"
        if data[4].strip() == "":
            data[4] = "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"

    bot.send_message(message.from_user.id, "–ò–∑–º–µ–Ω—è—é –∑–∞–º–µ—Ç–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ...")

    sheet = event_data["table"]
    worksheet = sheet.sheet1
    worksheet.update(f"A{event_data['row']}", [data])

    bot.send_message(message.from_user.id, "–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!")


bot.polling(none_stop=True, interval=0)
